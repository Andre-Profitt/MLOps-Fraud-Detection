name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job 1: Code Quality & Linting
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy pylint

      - name: Run Black (formatting)
        run: black --check src/ tests/

      - name: Run isort (import sorting)
        run: isort --check-only src/ tests/

      - name: Run Flake8 (linting)
        run: flake8 src/ tests/ --max-line-length=120 --ignore=E203,W503

      - name: Run Pylint
        run: pylint src/ --disable=C0111,R0903 --max-line-length=120
        continue-on-error: true

      - name: Run MyPy (type checking)
        run: mypy src/ --ignore-missing-imports
        continue-on-error: true

  # Job 2: Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Archive coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

  # Job 3: Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
        run: |
          pytest tests/integration/ -v

  # Job 4: Security Scanning
  security:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety (dependency check)
        run: safety check --json
        continue-on-error: true

      - name: Run Bandit (security linting)
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

  # Job 5: Docker Build
  docker-build:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: fraud-detection-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm fraud-detection-api:${{ github.sha }} python -c "import src; print('Import successful')"

  # Job 6: Model Validation
  model-validation:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate model artifacts
        run: |
          python -c "
          import pickle
          import os
          
          # Check if model artifacts exist (in CI, this would validate structure)
          print('Model validation placeholder')
          print('In production, this would validate model metrics, schema, etc.')
          "

      - name: Run model performance tests
        run: |
          # Placeholder for model performance validation
          echo "Model performance validation would run here"
          echo "- Check minimum accuracy threshold"
          echo "- Validate F1 score"
          echo "- Check for model bias"

  # Job 7: Documentation
  documentation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme

      - name: Build documentation
        run: |
          # Placeholder for documentation build
          echo "Documentation build would happen here"

  # Job 8: Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust

      - name: Run load tests
        run: |
          # Placeholder for load testing
          echo "Load tests would run here"
          echo "- Target: 1000+ requests/sec"
          echo "- p99 latency < 50ms"

  # Summary Job
  ci-summary:
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, security, docker-build, model-validation]
    if: always()
    steps:
      - name: CI Summary
        run: |
          echo "=========================================="
          echo "CI Pipeline Summary"
          echo "=========================================="
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Security Scan: ${{ needs.security.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "Model Validation: ${{ needs.model-validation.result }}"
          echo "=========================================="

      - name: Notify on failure
        if: failure()
        run: |
          echo "CI Pipeline failed! Check the logs above."
          # In production, send notifications (Slack, email, etc.)
